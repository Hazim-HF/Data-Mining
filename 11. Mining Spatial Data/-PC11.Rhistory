q()
install.packages("tm")
install.packages("SnowballC")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("syuzhet")
install.packages("ggplot2")
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
text<- readLines(file.choose())
text<- readLines(file.choose())
text<- readLines(file.choose())
text<- readLines(file.choose())
class(text)
docs<- Corpus(VectorSource(text))
class(text)
inspect(docs)
toSpace<- content_transformer(function(x,pattern)
           gsub(pattern,"",x))
docs2<- tm_map(docs, toSpace, ":")
docs3<- tm_map(docs2, toSpace, "!")
docs4<- tm_map(docs3, toSpace, ",")
docs5<- tm_map(docs4, content_transformer(tolower))
toSpace<- content_transformer(function(x,pattern)
           gsub(pattern,"",x))
docs2<- tm_map(docs, toSpace, ":")
docs3<- tm_map(docs2, toSpace, "!")
docs4<- tm_map(docs3, toSpace, ",")
inspect(docs4)
docs5<- tm_map(docs4, content_transformer(tolower))
inspect(docs5)
docs6<- tm_map(docs5, removeNumbers)
inspect(docs6)
docs7<- tm_map(docs6, removewords,
               stopwords("english"))
inspect(docs7)
inspect(docs7)
docs7<- tm_map(docs6, removeWords,
               stopwords("english"))
inspect(docs7)
docs8<- tm_map(docs7, removePunction)
inspect(docs8)
docs8<- tm_map(docs7, removePunctuaion)
inspect(docs8)
docs8<- tm_map(docs7, removePunctuaion)
inspect(docs8)
docs8<- tm_map(docs7, removePunctuaion)
inspect(docs8)
docs9<- tm_map(docs8, stripWhitespace)
inspect(docs9)
docs8<- tm_map(docs7, removePunctuaion)
inspect(docs8)
docs7<- tm_map(docs6, removeWords,
               stopwords("english"))
inspect(docs7)
docs8<- tm_map(docs7, removePunctuaion)
inspect(docs8)
docs8<- tm_map(docs7, removePunctuation)
inspect(docs8)
docs9<- tm_map(docs8, stripWhitespace)
inspect(docs9)
docs10<- tm_map(docs9, stemDocument)
inspect(docs9)
m<- as.matrix(dtm)
dtm<- TermDocumentMatrix(docs10)
m<- as.matrix(dtm)
m
dim(m)
v<- sort(rowSums(m), decreasing=T)
d<- data.frame(word=names(v), freq=v)
v
d
set.seed(12)
wordcloud(words=d$word, freq=d$freq, min.freq=1,
          max.words=200, random.order=F,
          colorsbrewer.pal(8, "Dark2"))
set.seed(12)
wordcloud(words=d$word, freq=d$freq, min.freq=1,
          max.words=200, random.order=F,
          colors=brewer.pal(8, "Dark2"))
findAssoc(dtm, terms="freedom", corlimit=0.3)$freedom
findAssocs(dtm, terms="freedom", corlimit=0.3)$freedom
findAssocs(dtm, terms="will", corlimit=0.3)$will
#Example: which words are associated with "freedom"
           corlimit=0.25)
           corlimit=0.25)
           corlimit=0.25)
findAssocs(dtm, term=findFreqTerms(dtm, lowfreq=10),
           corlimit=0.25)
library(sentimentr)
x<- 'Sentiment analysis is super fun'
sentiment(x)
y<- 'Sentiment analysis is super boring. But I do love working with R'
sentiment(y)
text
library(syuzhet)
sentiment_skor<- get_sentiment(text, method="syuzhet")
sentiment_skor
hist(sentiment_skor)
summary(sentiment_skor)
d<- get_nrc_sentiment(text)
d
td<- data.frame(t(d))
td
td_new<- data.frame(row$Sums(td))
td_new<- data.frame(rowSums(td))
td_new
names(td_new)<- "count"
names(td_new)
td_new
td_new<- cbind(:sentiment", row=names(td_new), td_new)
td_new<- cbind(sentiment", row=names(td_new), td_new)
td_new
td_new<- cbind(sentiment", row=names(td_new), td_new)
td_new
td_new<- cbind("sentiment", row=names(td_new), td_new)
td_new
rownames(td_new<- NULL
rownames(td_new)<- NULL
rownames(td_new)<- NULL
td_new
qplot(sentiment, data=td_new, weight=conut, geom="bar",
      fill=sentiment, ylan="Frequency")+
      ggtitle("sentiment Emotion")
qplot(sentiment, data=td_new, weight=conut, geom="bar",
      fill=sentiment, ylab="Frequency")+
      ggtitle("sentiment Emotion")
qplot(sentiment, data=td_new, weight=count, geom="bar",
      fill=sentiment, ylab="Frequency")+
      ggtitle("sentiment Emotion")
names(td_new)<- "count"
td_new<- cbind("sentiment",=rownames(td_new), td_new)
rownames(td_new)<- NULL
td_new
qplot(sentiment, data=td_new, weight=count, geom="bar",
      fill=sentiment, ylab="Frequency")+
      ggtitle("sentiment Emotion")
library(syuzhet)
sentiment_skor<- get_sentiment(text, method="syuzhet")
hist(sentiment_skor)
summary(sentiment_skor)
d<- get_nrc_sentiment(text)
td_new<- data.frame(rowSums(td))
td_new<- cbind("sentiment",=rownames(td_new), td_new)
rownames(td_new)<- NULL
qplot(sentiment, data=td_new, weight=count, geom="bar",
      fill=sentiment, ylab="Frequency")+
      ggtitle("sentiment Emotion")
library(syuzhet)
sentiment_skor<- get_sentiment(text, method="syuzhet")
hist(sentiment_skor)
summary(sentiment_skor)
d<- get_nrc_sentiment(text)
td<- data.frame(t(d))
td_new<- data.frame(rowSums(td))
names(td_new)<- "count"
td_new<- cbind("sentiment"=rownames(td_new), td_new)
rownames(td_new)<- NULL
qplot(sentiment, data=td_new, weight=count, geom="bar",
      fill=sentiment, ylab="Frequency")+
      ggtitle("sentiment Emotion")
wst
getwd()
attach(wst)
library(sp)
library(raster)
wst
lonlat<- cbind(longitude, latitude)
lonlat
crdef<- CRS('+proj=lonlat +datum=WSGB4')
crdef<- CRS('+proj=lonlat +datum=WSG84')
library(sp)
library(raster)
lonlat<- cbind(longitude, latitude)
crdef<- CRS('+proj=lonlat +datum=WSG84'
crdef<- CRS('+proj=lonlat +datum=WSG84')
crdef<- CRS('+proj=lonlat +datum=WSG84')
#spatial point data
pts<- SpatialPoints(lonat, proj4string=crdef)
plot(pts, axes=T)
crdef<- CRS('+proj=longlat +datum=WSG84')
crdef<- CRS('+proj=longlat +datum=WSG84')
crdef<- CRS('+proj=longlat +datum=WSG84')
pts<- SpatialPoints(lonat, proj4string=crdef)
plot(pts, axes=T)
lonlat<- cbind(longitude, latitude)
lonlat
crdef<- CRS('+proj=longlat +datum=WSG84')
crdef
crdef<- CRS('+proj=longlat +datum=WGS84')
crdef
pts<- SpatialPoints(lonat, proj4string=crdef)
pts<- SpatialPoints(lonlat, proj4string=crdef)
plot(pts, axes=T)
lon<- c(-116.8,-114.2,-112.9,-111.9,-114.2,
        -115.4,-117.7)
lat<- c(41.3,42.9,42.4,39.8,37.6,38.3,37.7)
lonlat2<- cbind(lon,lat)
lns<- spLines(lonlat2, crs=crdef)
plot(lns, axes=T)
poly<- spPplygons(lonlat2, crs=crdef)
poly<- spPolygons(lonlat2, crs=crdef)
plot(poly, axes=T)
poly<- spPolygon(lonlat2, crs=crdef)
poly<- spPolygons(lonlat2, crs=crdef)
plot(poly, axes=T)
df<- data.frame(ID=name, precip)
ptsdf< SpatialPointsDataFrame(pts, data=df)
ptsdf< SpatialPointsDataFrame(pts, data=df)
df<- data.frame(ID=name, precip)
ptsdf< SpatialPointsDataFrame(pts, data=df)
showDefault(ptsdf)
ptsdf<- SpatialPointsDataFrame(pts, data=df)
showDefault(ptsdf)
library(raster)
r<- raster(ncol=20, nrow=20, xmx=-80,xmn=-150,
           ymn=20,ymx=60)
data<- norm(400)
values(r)<- data
data<- rnorm(400)
values(r)<- data
plot(r)
r2<- r*r
r3<- r*10
r4<- 2*r2+r3
s<- stack(r,r2,r3,r4)
plot(s)
f<- system.file("external/lux.shp", packages="raster")
p<- shapefile(f)
f<- system.file("external/lux.shp", package="raster")
p<- shapefile(f)
plot(p,axes=T)
d<- data
d
d<- data.frame(p)
d
p$NAMW_1
p$AREA
p$NAME_1
p2<- p[, 'NAME_1']
p2
temperature<- 100*rexp(12, 20)
temperature
p$Temperature<- temperature
p$Temperature
p$Temperature<-NULL
p$Temperature
dfr<- data.frame(District=p$NAME_1, Canton=p$NAME_2,
                 Precipitation=round(100*rexp(12,50), 3))
dfr
dft<- dfr[order(dfr$Canton),]
dft
pm<- merge(p,dfr, by.x=c('NAME_1', 'NAME_2'),
                  by.y=c('District', 'Canton'))
data.frame(pm)
dfr<- data.frame(District=p$NAME_1, Canton=p$NAME_2,
                 Precipitation=round(100*rexp(12,50), 3))
dft<- dfr[order(dfr$Canton),]
pm<- merge(p,dfr, by.x=c('NAME_1', 'NAME_2'),
                  by.y=c('District', 'Canton'))
data.frame(pm)
i<- which(pm$NAME_1=='Diekirch')
i
g<- pm[i, ]
g
data.frame(g)
plot(g, axes=T)
z<- raster(pm, nrow=2, ncol=2, vals=1:4)
names(z)<- 'Zone'
names(z)
z<- as(z, 'SpatialPolygonsDataFrame')
plot(pm, axes=T)
plot(z, add=T, border='red', lwd=2)
z2<- z[2, ]
plot(z2, add=T, border='blue', lwd=2, density=3)
e<- erase(pm, z2)
windows(10,10)
plot(e, axes=T)
data,frame(e)
data.frame(e)
i<- intersect(pm, z2)
windows(10,10)
plot(i, axes=T)
data.frame(i)
plot(r5)
r5<- raster(s, layer=2)
plot(r5)
r6<- r+10
r7<- r2+r3
image<- rgamma(400, 20,30)
r7$Image<- image
plot(r7)
L1<- crop(r7,-130, -90, 30, 40))
L2<- crop(r7, extent(-100,-80,40,50))
L1<- crop(r7,extent(-130, -90, 30, 40))
L2<- crop(r7, extent(-100,-80,40,50))
m2<- merge(L1,L2)
plot(m2)
cellStats(m2, mean)
cell$Stats(m2, median)
cell$Stats(m2, range)
cellStats(m2, median)
cellStats(m2, range)
q()
