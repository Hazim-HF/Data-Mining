countrynames = unique(hd$NAME)
# normal regression
hd = houses
countries = spat_data('counties')
# load library
library(sp)
library(raster)
# load data
load("./Data/wst.RData")
head(wst)
class(wst)
lonlat1 = cbind(wst$longitude, wst$latitude)
pts = SpatialPoints(lonlat1)
pts
# define crs
crdref = CRS('+proj=longlat +datum=WGS84')
pts = SpatialPoints(lonlat1, proj4string = crdref)
pts
df = data.frame(ID=wst$name, precip = wst$precip)
ptsdf = SpatialPointsDataFrame(pts, data = df)
plot(ptsdf, axes = T)
# look at the details of the data
showDefault(ptsdf)
# spatial lines
lon = c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat = c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat = cbind(lon, lat)
lns = spLines(lonlat, crs=crdref)
plot(lns, axes = T)
pols = spPolygons(lonlat, crs=crdref)
plot(pols, axes = T)
r = raster(ncol = 20, nrow=20, xmx=-80, xmn=-150, ymn=20, ymx=60)
x = rexp(ncell(r))
values(r) = x
showDefault(r)
plot(r)
r2 = r*r
r3 = sqrt(r)
r4 = 2 * r2 + r3
s = stack(r, r2, r3, r4)
showDefault(s)
plot(s)
library(terra)
f = system.file('external/lux.shp', package='raster')
p = shapefile(f) #spatial polygon
plot(p, axes=T)
d = data.frame(p)
d
showDefault(p) # spatial polygons data frame
p$NAME_2
p$AREA
p2 = p[,'NAME_2']
data.frame(p2)
temp = 10 * rexp(12)
p$Temperature = temp
data.frame(p)
i = which(p$NAME_1 == 'Luxembourg')
g = p[i,]
plot(g, axes = T)
dfr = data.frame(District=p$NAME_1, Canton = p$NAME_2,
Precip = round(100*rexp(12),3)) # simulation data
dfr[order(dfr$Canton), ]
data2 = merge(p, dfr, by.x = c('NAME_1', 'NAME_2'), by.y = c('District', 'Canton'))
data.frame(data2)
z = raster(p, nrow=2, ncol=2, vals=1:4)
names(z) = 'Zone'
z = as(z, 'SpatialPolygonsDataFrame')
plot(p, axes=T)
plot(z, add = T, border = 'blue', lwd = 4)
z2 = z[2, ]
plot(p, axes=T)
plot(z2, add = T, border = 'red')
e = erase(p, z2)
plot(e,axes = T)
e = intersect(p, z2)
plot(e,axes = T)
e3 = extent(6,6.8,49.7,50)
pe = crop(p, e3)
plot(p, axes=T)
plot(pe, axes = T, col= 'green', add = T)
plot(s)
r5 = raster(s, layer = 2)
plot(r5)
r6 = r2 + 10
r7 = r6 ^ 2
r8 = r * r2 + r7
plot(r8)
pi = rgamma(400,30,20)
r8$new = pi
plot(r8)
l2 = crop(s, extent(-130, -90, 30,40))
plot(l2)
l3 = crop(s, extent(-100, -80, 40, 50))
m = merge(l2, l3)
plot(m)
cellStats(s, mean)
cellStats(s, sd)
p = shapefile(system.file('external/lux.shp', package='raster'))
library(spdep)
w = poly2nb(p)
ww = nb2listw(w)
moran.test(p$AREA, ww)
library(devtools)
#install_github('rspatial/rspat')
library(rspat)
#precipitation in California
d = spat_data('precipitation')
d$prec = rowSums(d[, 6:17])
dsp = vect(d, c('LONG', 'LAT'), crs = '+proj=longlat +datum=WSG84')
CA = spat_data('counties')
cuts = c(0, 200, 300, 500, 1000, 3000)
library(ggplot2)
blues = colorRampPalette(c('yellow', 'orange', 'purple', 'blue',
'darkblue'))
plot(CA)
plot(dsp, 'prec', type = 'interval', col=blues(10), breaks=cuts, add=T)
v = voronoi(dsp)
plot(v)
vca = crop(v, CA)
plot(vca, 'prec')
houses = read.csv('./Data/hd.csv')
str(houses)
hvect = vect(houses, c('longitude', 'latitude'))
plot(hvect, cex=0.5, axes=T)
countries = spat_data('counties')
crs(hvect) = crs(countries)
# normal regression
hd = houses
model = glm(houseValue~income+houseAge+roomhead+bedroomhead+population,
data = hd)
summary(model)
# geographically weighted regression (GWR)
plot(hvect, cex = 0.5, axes = T)
plot(countries, add = T)
countrynames = unique(hd$NAME)
# Regression model towards difference places
regfun = function (x) {
dat = hd[hd$NAME == x, ]
m = glm(houseValue~income+houseAge+roomhead+bedroomhead+population,
data = dat)
coefficients(m)
}
hd2 = hd[!is.na(hd$NAME ), ]
countrynames = unique(hd2$NAME)
res = sapply(countrynames, regfun)
# effect of income toward house value
dotchart(sort(res['income']), cex = 0.5)
sort(res['income']
sort(res['income'])
res['income', ])
res['income', ]
# effect of income toward house value
dotchart(sort(res['income', ]), cex = 0.5)
ls('package:openxlsx')
library(openxlsx)
ls('package:openxlsx')
?gsub
# predictive mean matching
air.pmm = mice(airquality, m = 5, meth = 'pmm')
mdata = read.csv('./Data/Mdata.csv', sep = ';')
head(mdata)
library(mice)
md.pattern(mdata)
head(na.omit(mdata))
# alternative way to filter only data without any missing value
head(mdata[complete.cases(mdata), ])
# see all rows of data with missing value in at least one of its attribute
head(mdata[!complete.cases(mdata), ])
head(edit(mdata))
par(mfrow=c(1,3))
hist(mdata$indus, col = 'skyblue', main = 'Indus', xlab = 'Indus')
hist(mdata$crim, col = 'bisque3', main = 'Crim', xlab = 'Crim')
hist(mdata$medv, col = 'aquamarine4', main = 'Medv', xlab = 'Medv')
# imputate using median of the centralized metric
indus_imp = ifelse(is.na(mdata$indus), median(mdata$indus, na.rm = T), mdata$indus)
# compare the data distribution before and after imputation
par(mfrow=c(1,2))
hist(mdata$indus, col = 'magenta', main = 'Original Data', xlab = 'Indus')
hist(indus_imp, col = 'darkblue', main = 'Imputed Data', xlab = 'Indus')
iris.mis1 = read.csv('./Data/iris.mis1.csv')
head(iris.mis1)
library(multiUS)
iris_knn = KNNimp(iris.mis1, k = 10)
md.pattern(iris_knn)
airquality = read.table('./Data/airquality.txt')
head(airquality)
# predictive mean matching
air.pmm = mice(airquality, m = 5, meth = 'pmm')
md.pattern(complete(air.pmm))
meth[c('Age')] = 'pmm'
init(mice(dat, maxit = 0))
init = mice(dat, maxit = 0)
data2 = read.csv('./Data/dat2.csv')
data2 = read.csv('./Data/dat2.csv')
data2 = data2[-1, ]
dat = data2 %>%
mutate(Smoking = as.factor(Smoking)) %>%
mutate(Education = factor(Education,
levels = c('Low', 'Medium', 'High'),
ordered = T)) %>%
mutate(Gender = as.factor(Gender))
data2 = read.csv('./Data/dat2.csv')
data2 = data2[-1, ]
library(dplyr)
dat = data2 %>%
mutate(Smoking = as.factor(Smoking)) %>%
mutate(Education = factor(Education,
levels = c('Low', 'Medium', 'High'),
ordered = T)) %>%
mutate(Gender = as.factor(Gender))
init = mice(dat, maxit = 0)
meth = init$method
predM = init$predictorMatrix
meth[c('Age')] = 'pmm'
meth[c('Cholesterol')] = 'pmm'
meth[c('SystolicBP')] = 'pmm'
meth[c('BMI')] = 'pmm'
meth[c('Gender')] = 'pmm'
meth[c('Gender')] = 'logreg'
meth[c('Smoking')] = 'logreg'
meth[c('Education')] = 'polyreg'
ImputedData = mice(dat, method = meth, predictorMatrix = predM)
data2 = read.csv('./Data/dat2.csv')
data2 = data2[-1, ]
library(dplyr)
dat = data2 %>%
mutate(Smoking = as.factor(Smoking)) %>%
mutate(Education = factor(Education,
levels = c('Low', 'Medium', 'High'),
ordered = T)) %>%
mutate(Gender = as.factor(Gender))
init = mice(dat, maxit = 0)
meth = init$method
predM = init$predictorMatrix
meth[c('Age')] = 'pmm'
meth[c('Cholesterol')] = 'pmm'
meth[c('SystolicBP')] = 'pmm'
meth[c('BMI')] = 'pmm'
meth[c('Gender')] = 'pmm'
meth[c('Gender')] = 'logreg'
meth[c('Smoking')] = 'logreg'
meth[c('Education')] = 'polyreg'
ImputedData = mice(dat, method = meth, predictorMatrix = predM)
CompletedData = complete(ImputedData)
md.pattern(CompletedData)
dataAP3$Visibility_pAerosol
dataAP3 <- read.csv('./Data/dataAP3.csv', header = T)
head(dataAP3)
dataAP3 = dataAP3[,-c(1)]
head(dataAP3)
hist(dataAP3$ozone_ppm, main = 'Histogram of Ozone', col = 'aquamarine4',
xlab = 'Ozone')
min_ozone = min(dataAP3$ozone_ppm)
max_ozone = max(dataAP3$ozone_ppm)
v = ((dataAP3$ozone_ppm - min_ozone) * (1 - 0)) / (max_ozone-min_ozone)
head(v)
hist(v, col = 'bisque3')
mm = function (x, n.min, n.max) {
min = min(x)
max = max(x)
mm.norm = ((x-min) * (n.max-n.min)/(max-min)) + n.min
hist(mm.norm, col = 'aquamarine4')
return(mm.norm)
}
new.dataAP3 = mm(dataAP3$ozone_ppm, 0, 1)
hist(dataAP3$pressure_height.hPA, col = 'skyblue',
main = 'Histogram of Pressure Height (hPA)', xlab = 'Pressure Height')
mean_hpa = mean(dataAP3$pressure_height.hPA)
sd_hpa = sd(dataAP3$pressure_height.hPA)
z_score_hpa = (dataAP3$pressure_height.hPA - mean_hpa) / sd_hpa
head(z_score_hpa)
hist(z_score_hpa, col = 'bisque3', main = 'Histogram of Normalize Data')
z = function (x) {
mean = mean(x)
sd = sd(x)
z = (x - mean)/sd
hist(z, col = 'aquamarine4')
return(z)
}
z(dataAP3$pressure_height.hPA)
pHnew = dataAP3$pressure_height.hPA/1000
head(pHnew)
hist(pHnew, col = 'bisque3')
dataAP3$Visibility_pAerosol
hist(dataAP3$Visibility_pAerosol, col = 'skyblue')
vis2 = sqrt(dataAP3$Visibility_pAerosol)
hist(vis2, col = 'bisque3')
par(mfrow=c(1,2))
hist(vis2, col = 'bisque3')
boxplot(vis2, col = 'bisque3')
dataAP3$Visibility_pAerosol
par(mfrow=c(1,2))
hist(dataAP3$Visibility_pAerosol, col = 'skyblue')
hist(-dataAP3$Visibility_pAerosol)
dataAP3$Visibility_pAerosol
par(mfrow=c(1,2))
hist(dataAP3$Visibility_pAerosol, col = 'skyblue')
hist(1/dataAP3$Visibility_pAerosol)
dataAP3$Visibility_pAerosol
par(mfrow=c(1,2))
hist(dataAP3$Visibility_pAerosol, col = 'skyblue')
hist(dataAP3$Visibility_pAerosol)
dataAP3$Visibility_pAerosol
par(mfrow=c(1,2))
hist(dataAP3$Visibility_pAerosol, col = 'skyblue')
# example of reflecting graph
hist(-dataAP3$Visibility_pAerosol)
barplot(table(discretize(Assault, 'equalfreq', 4)$X))
dataAP3 <- read.csv('./Data/dataAP3.csv', header = T)
head(dataAP3)
dataAP3 = dataAP3[,-c(1)]
head(dataAP3)
hist(dataAP3$ozone_ppm, main = 'Histogram of Ozone', col = 'aquamarine4',
xlab = 'Ozone')
min_ozone = min(dataAP3$ozone_ppm)
max_ozone = max(dataAP3$ozone_ppm)
v = ((dataAP3$ozone_ppm - min_ozone) * (1 - 0)) / (max_ozone-min_ozone)
head(v)
hist(v, col = 'bisque3')
mm = function (x, n.min, n.max) {
min = min(x)
max = max(x)
mm.norm = ((x-min) * (n.max-n.min)/(max-min)) + n.min
hist(mm.norm, col = 'aquamarine4')
return(mm.norm)
}
new.dataAP3 = mm(dataAP3$ozone_ppm, 0, 1)
hist(dataAP3$pressure_height.hPA, col = 'skyblue',
main = 'Histogram of Pressure Height (hPA)', xlab = 'Pressure Height')
mean_hpa = mean(dataAP3$pressure_height.hPA)
sd_hpa = sd(dataAP3$pressure_height.hPA)
z_score_hpa = (dataAP3$pressure_height.hPA - mean_hpa) / sd_hpa
head(z_score_hpa)
hist(z_score_hpa, col = 'bisque3', main = 'Histogram of Normalize Data')
z = function (x) {
mean = mean(x)
sd = sd(x)
z = (x - mean)/sd
hist(z, col = 'aquamarine4')
return(z)
}
z(dataAP3$pressure_height.hPA)
pHnew = dataAP3$pressure_height.hPA/1000
head(pHnew)
hist(pHnew, col = 'bisque3')
dataAP3$Visibility_pAerosol
par(mfrow=c(1,2))
hist(dataAP3$Visibility_pAerosol, col = 'skyblue')
# example of reflecting graph
hist(-dataAP3$Visibility_pAerosol)
vis2 = sqrt(dataAP3$Visibility_pAerosol)
hist(vis2, col = 'bisque3')
par(mfrow=c(1,2))
hist(vis2, col = 'bisque3')
boxplot(vis2, col = 'bisque3')
qqnorm(vis2, col = 'bisque4')
ks.test(vis2, 'pnorm', mean = mean(vis2), sd = sd(vis2))
shapiro.test(vis2)
library(nortest)
ad.test(vis2)
library(infotheo)
data("USArrests")
attach(USArrests)
USArrests
cutoff = 10 # Need domain explanation
status_m = ifelse(Murder<10,'Low Risk','High Risk')
head(status_m)
# alternative way
cut(USArrests$Murder,
breaks = c(min(USArrests$Murder), 10, max(USArrests$Murder)),
labels = c('Low Risk', 'High Risk'))
library(car)
status_den = Recode(UrbanPop, "0:50 = 'Low Density';
51:70 = 'Moderate Density';
else = 'High Density'")
head(status_den)
# alternative way
assault_status = discretize(Assault, 'equalwidth', 4)
unique(assault_status)
head(assault_status)
barplot(table(assault_status$X))
hist(assault_status$X)
barplot(table(discretize(Assault, 'equalfreq', 4)$X))
barplot(table(discretize(Assault, 'equalfreq', 4)$X), main = 'Equal Frequency')
