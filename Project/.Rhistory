Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Print the data frame
print(email_data)
email_data = as.matrix(email_data[,-1])
barplot(email_data, space = 5)
#barplot(email_data$Genuine_emails, add = T)
#barplot(email_data$Contains_Virus, add = T, beside = T)
#barplot(email_data$Spam_emails, add = T, beside = T)
#barplot(email_data$Others, add = T, beside = T)
#barplot(sum(email_data[,1]), beside = T)
# Data for Emails
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Print the data frame
print(email_data)
#barplot(email_data$Genuine_emails, add = T)
#barplot(email_data$Contains_Virus, add = T, beside = T)
#barplot(email_data$Spam_emails, add = T, beside = T)
#barplot(email_data$Others, add = T, beside = T)
#barplot(sum(email_data[,1]), beside = T)
email_data[,-1]
#barplot(email_data$Genuine_emails, add = T)
#barplot(email_data$Contains_Virus, add = T, beside = T)
#barplot(email_data$Spam_emails, add = T, beside = T)
#barplot(email_data$Others, add = T, beside = T)
#barplot(sum(email_data[,1]), beside = T)
as.matrix(email_data[,-1])
# Data for Emails
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Print the data frame
print(email_data)
email_data = t(as.matrix(email_data[,-1]))
barplot(email_data, beside = T, space = 5)
#barplot(email_data$Genuine_emails, add = T)
#barplot(email_data$Contains_Virus, add = T, beside = T)
#barplot(email_data$Spam_emails, add = T, beside = T)
#barplot(email_data$Others, add = T, beside = T)
#barplot(sum(email_data[,1]), beside = T)
#as.matrix(email_data[,-1])
# Create email_data
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Convert to matrix (excluding the Date column)
stacked_matrix <- as.matrix(email_data[ , -1])
# Transpose matrix for stacking
stacked_matrix <- t(stacked_matrix)
# Colors for each category
colors <- c("darkblue", "steelblue", "lightblue", "cyan")
# Create the stacked bar plot
barplot(
stacked_matrix,
beside = FALSE,                     # Stacked bars
col = colors,                       # Colors for each category
legend.text = c("Genuine Emails", "Contains Virus", "Spam Emails", "Others"),
args.legend = list(x = "topright"), # Legend in top-right corner
main = "Stacked Bar Plot of Email Categories",
xlab = "Date",
ylab = "Total Emails",
names.arg = email_data$Date         # Add dates to the x-axis
)
#email_data = t(as.matrix(email_data[,-1]))
#barplot(email_data, beside = T, space = 5)
#barplot(email_data$Genuine_emails, add = T)
#barplot(email_data$Contains_Virus, add = T, beside = T)
#barplot(email_data$Spam_emails, add = T, beside = T)
#barplot(email_data$Others, add = T, beside = T)
#barplot(sum(email_data[,1]), beside = T)
email_data
# Create email_data
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Convert to matrix (excluding the Date column)
stacked_matrix <- as.matrix(email_data[ , -1])
# Data for Emails
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Print the data frame
print(email_data)
email_data
t(as.matrix(email_data[,-1]))
# Data for Emails
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Print the data frame
print(email_data)
ed = t(as.matrix(email_data[,-1]))
barplot(ed)
barplot(ed, space = 2)
barplot(ed, space = 2)
barplot(colSums(ed), add = T)
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = 2)
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = 2.1)
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = 2.15)
?barplot
?barplot
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = 2, xlim = c(10,100))
?barplot
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = 2.3, xlim = c(10,100))
# Create email_data
email_data <- data.frame(
Date = c("1/10", "2/10", "3/10", "4/10", "5/10", "6/10", "7/10"),
Genuine_emails = c(300, 700, 600, 400, 400, 800, 400),
Contains_Virus = c(50, 100, 75, 50, 100, 35, 50),
Spam_emails = c(850, 400, 100, 400, 300, 550, 600),
Others = c(100, 200, 200, 300, 200, 100, 250)
)
# Calculate total emails for each date
email_data$Total <- rowSums(email_data[ , -1])
# Create a matrix for the stacked categories
stacked_matrix <- as.matrix(email_data[ , -1])
# Separate the "Total" column
totals <- stacked_matrix[ , "Total"]
# Remove the Total column from the stacked categories
stacked_matrix <- t(stacked_matrix[ , -ncol(stacked_matrix)])
# Colors for each category (last one for total column)
colors <- c("darkblue", "steelblue", "lightblue", "cyan", "pink")
# Create a grouped bar plot (stacked + total beside)
barplot(
stacked_matrix,
beside = TRUE,                      # Side-by-side bars
col = colors[-length(colors)],      # Colors for stacked categories
legend.text = c("Genuine Emails", "Contains Virus", "Spam Emails", "Others"),
args.legend = list(x = "topright"), # Legend in the top-right corner
main = "Bar Plot of Email Categories with Total Column",
xlab = "Date",
ylab = "Total Emails",
names.arg = rep(email_data$Date, each = 2) # Date labels for both stacked and total
)
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = 2.3, xlim = c(0.2,1))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = rep(2,3)
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = rep(2,3))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = rep(3,2))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = c(3,2))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = c(3,rep(3,6)))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = c(2,rep(3,6)))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = c(2, rep(3,6)))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = c(3, rep(2,6)))
barplot(ed, space = 2)
barplot(colSums(ed), add = T, space = c(3, rep(2,6)))
data = read.table('text.txt')
install.packages('tm')
install.packages('SnowballC')
install.packages('wordcloud')
install.packages('RColorBrewer')
install.packages('syuzet')
install.packages('syuzhet')
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
text = readLines('text.txt')
class(text)
text = readLines('text.txt')
text
docs = Corpus(VectorSource(text))
docs
inspect(docs)
class(docs)
?content_transformer
toSpace = content_transformer(function(x, pattern)
gsub(pattern(, '', x)))
docs2 = tm_map(docs, toSpace, '!')
docs2 = tm_map(docs, toSpace, '!')
toSpace = content_transformer(function(x, pattern)
gsub(pattern, '', x))
docs2 = tm_map(docs, toSpace, '!')
docs2
inspect(docs2)
docs2 = tm_map(docs, toSpace, ':')
docs2 = tm_map(docs, toSpace, ',')
inspect(docs2)
text = readLines('text.txt')
class(text)
docs = Corpus(VectorSource(text))
inspect(docs)
class(docs)
toSpace = content_transformer(function(x, pattern)
gsub(pattern, '', x))
docs2 = tm_map(docs, toSpace, '!')
docs2 = tm_map(docs, toSpace, ':')
docs2 = tm_map(docs, toSpace, ',')
inspect(docs2)
docs2 = tm_map(docs, toSpace, '!')
docs3 = tm_map(docs2, toSpace, ':')
docs4 = tm_map(docs3, toSpace, ',')
docs5 = tm_map(docs4, content_transformer(tolower))
docs5
inspect(docs5)
docs6 = tm_map(docs5, removeNumbers)
inspect(docs6)
docs7 = tm_map(docs6, removeWords, stopwords('english'))
inspect(docs7)
docs8 = tm_map(docs7, removePunctuation)
inspect(docs8)
docs9 = tm_map(docs8, stripWhitespace)
inspect(docs9)
docs10 = tm_map(docs9, stemDocument)
inspect(docs10)
dtm = TermDocumentMatrix(docs10)
dtm
inspect(dtm)
m = as.matrix(dtm)
m
dim(m)
docs10
docs
m
dim(m)
v = sort(rowSums(m), decreasing = T)
v
d = data.frame(word = names(v), frev = v)
d
d = data.frame(word = names(v), freq = v)
d
set.seed(12)
wordcloud(words=d$word, freq = d$freq, min = 1)
set.seed(12)
wordcloud(words=d$word, freq = d$freq, min = 1, max = 200, random.order = F,
colors = brewer.pal(8, 'Dark2'))
set.seed(12)
wordcloud(words=d$word, freq = d$freq, min.freq = 2, max = 150, random.order = F,
colors = brewer.pal(8, 'Dark2'))
set.seed(12)
wordcloud(words=d$word, freq = d$freq, min.freq = 2, max.words = 150,
random.order = F, colors = brewer.pal(8, 'Dark2'))
findAssocs(dtm, terms = 'freedom', corlimit = 0.3)$freedom
findAssocs(dtm, terms = 'freedom', corlimit = 0.3)$freedom
findAssocs(dtm, terms=findFreqTerms(dtm, lowfreq = 10), corlimit = 0.3
findAssocs(dtm, terms=findFreqTerms(dtm, lowfreq = 10), corlimit = 0.3)
findAssocs(dtm, terms=findFreqTerms(dtm, lowfreq = 10), corlimit = 0.3
findAssocs(dtm, terms=findFreqTerms(dtm, lowfreq = 10), corlimit = 0.3)
findAssocs(dtm, terms=findFreqTerms(dtm, lowfreq = 10), corlimit = 0.3)
install.packages('sentimentr')
library(sentimentr)
x = 'Sentiment analysis is super fun'
sentiment(x)
x = 'sentiment analysis is super boring. But I do love working with R'
sentiment(x)
sentiment_text = get_sentiment(text, method='syuzhet')
sentiment_text
mean(sentiment_text)
sentiment_text
hist(sentiment_text)
summary(sentiment_text)
d2 = get_nrc_sentiment(text)
d2
td = data.frame(t(d2))
ts
td
td_new = data.frame(rowSums(td))
td_new
td_new
names(td_new)[1] = 'count'
td_new
td_new = cbind('sentiment'=rownames(td_new), td_new)
td_new
rownames(td_new) = NULL
td_new
plot(sentiment, weight = count, data=td_new, geom = 'bar')
qplot(sentiment, weight = count, data=td_new, geom = 'bar')
qplot(sentiment, weight = count, data=td_new, geom = 'bar',
fill = sentiment,
ylab = 'count') + ggtitle('Sentiment Score')
qplot(sentiment, weight = count, data=td_new, geom = 'bar',
fill = sentiment,
ylab = 'count', las = 2) + ggtitle('Sentiment Score')
qplot(sentiment, weight = count, data=td_new, geom = 'bar',
fill = sentiment,
ylab = 'count') + ggtitle('Sentiment Score')
load("C:/Users/PC 11/OneDrive - Universiti Kebangsaan Malaysia/Data-Mining/11. Mining Spatial Data/wst.RData")
wst = load("wst.RData")
attach(wst)
wst
wst = load("C:/Users/PC 11/OneDrive - Universiti Kebangsaan Malaysia/Data-Mining/11. Mining Spatial Data/wst.RData")
wst
load("C:/Users/PC 11/OneDrive - Universiti Kebangsaan Malaysia/Data-Mining/11. Mining Spatial Data/wst.RData")
wst
attach(wst)
library(sp)
library(raster)
wst
wst
lonlat = cbind(longitude, latitude)
pts = SpatialPoints(lonlat)
pts
class(pts)
crdref = CRS('+proj=lonlat + datum = WGS84')
crdref = CRS('+proj=longlat + datum = WGS84')
crdref
pts = SpatialPoints(lonlat, proj4string = crdref)
pts
crdref = CRS('+proj=longlat + datum=WGS84')
pts = SpatialPoints(lonlat, proj4string = crdref)
pts
df = data.frame(ID=name, precip)
df
ptsdf = SpatialPointsDataFrame(pts, data=df)
ptsdf
plot(ptsdf, axes = T)
showDefault(ptsdf)
lon = c(-116.8, -114.2, -112.9, -114.2, -115.4, -117.7)
lat = c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat = cbind(lon, lat)
lon = c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat = c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat = cbind(lon, lat)
lns = spLines(lonlat, crs=crdref)
lns
plot(lns, axes=T)
pols = spPolygons(lonlat, crs=crdref)
plot(pols, axes = T)
r = raster(ncol = 20, nrow=20, xmx=-80, xmn=-150, ymn=20, ymx=60)
r
x = rnorm(ncell(r))
x
x = rexp(ncell(r))
x
values(r) = x
r
showDefault(r)
plot(r)
r2 = r*r
r3 = sqrt(r)
r2 = r*r
r3 = sqrt(r)
r4 = 2 * r2 + r3
s = stack(r, r2, r3, r4)
plot(s)
install.packages('rgdal')
library(rgdal)
install.packages('terra')
library(terra)
f = system.file('external/lux.shp', package='raster')
f
p = shapefile(f)
p
plot(p, axes=T)
d = data.frame(p)
d
dim(d)
showDefault(p)
p$NAME_2
p$NAME_2
p$AREA
p2 = P[,'NAME_2']
p2 = p[,'NAME_2']
data.frame(p2)
temp = rexp(12)
temp = 10 * rexp(12)
temp
p
str(p)
p$Temperature = temp
temp
i = which(p$NAME_1 == 'Luxembourg')
i
g = p[i,]
g
plot(g, axes = T)
dfr = data.frame(District=p$NAME_1, Canton = p$NAME_2,
Precip = round(10*rexp(12),3)) # simulation data
dfr
dfr = data.frame(District=p$NAME_1, Canton = p$NAME_2,
Precip = round(100*rexp(12),3)) # simulation data
dfr
dfr[order(dfr$Canton), ]
data2 = merge(p, dfr, by.x = c('NAME_1', 'NAME_2'), by.y = c('District', 'Canton'))
data2
data.frame(data2)
data2 = merge(p, dfr, by.x = c('NAME_1', 'NAME_2'), by.y = c('District', 'Canton'))
data.frame(data2)
z = raster(p, nrow=2, ncol=2, vals=1:4)
z
names(z) = 'Zone'
z
z = as(z, 'SpatialPolygonsDataFrame')
plot(z)
z = as(z, 'SpatialPolygonsDataFrame')
plot(z)
z = raster(p, nrow=2, ncol=2, vals=1:4)
names(z) = 'Zone'
z = as(z, 'SpatialPolygonsDataFrame')
plot(z, add = T, border = 'blue', lwd = 4)
z = raster(p, nrow=2, ncol=2, vals=1:4)
names(z) = 'Zone'
z = as(z, 'SpatialPolygonsDataFrame')
plot(p, axes=T)
plot(z, add = T, border = 'blue', lwd = 4)
z2 = z[2, ]
z2 = z[2, ]
plot(p, axes=T)
plot(z2, add = T, border = 'red')
e = erase(p, z2)
plot(e,axes = T)
e = -erase(p, z2)
e = erase(p, z2)
plot(-e,axes = T)
e = erase(p, z2)
plot(e,axes = T)
e = intersect(p, z2)
plot(e,axes = T)
e3 = extent(6,6.8,49.7,50)
pe = crop(p, e3)
plot(p, axes=T)
plot(pe, axes = T, add = T, col= 'green')
plot(s)
r5 = raster(s, layer = 2)
plot(r5)
r6 = r2 + 10
r7 = r6 ^ 2
r8 = r * r2 + r7
plot(r8)
pi = rgamma(400,30,20)
r8$new = pi
plot(r8)
l2 = crop(s, extend(-130, -100, 30,40))
l2 = crop(s, extent(-130, -100, 30,40))
plot(l2)
plot(l3)
l3 = crop(s, extent(-100, -80, 40, 40))
l3 = crop(s, extent(-100, -80, 40, 40))
l3 = crop(s, extent(-100, -80, 40, 50))
m = merge(l2, l3)
plot(m)
l2 = crop(s, extent(-130, -90, 30,40))
plot(l2)
l3 = crop(s, extent(-100, -80, 40, 50))
m = merge(l2, l3)
plot(m)
cellStats(s, mean)
cellStats(s, sd)
colnames(lf)
library(arrow)
library(forecast)
lf = read_parquet("https://storage.dosm.gov.my/labour/lfs_qtr.parquet")
lf_ts = ts(lf[,2], start = c(2010,1), frequency = 4)
plot(decompose(lf_ts))
par(mfrow=c(1,2))
plot(forecast(auto.arima(lf_ts)))
plot(forecast(tbats(lf_ts)))
lf_emp = ts(lf[,3], start = c(2010,1), frequency = 4)
plot(decompose(lf_emp))
par(mfrow=c(1,2))
plot(forecast(auto.arima(lf_emp)))
plot(forecast(tbats(lf_emp)))
lf_unemp = ts(lf[,4], start = c(2010,1), frequency = 4)
plot(decompose(lf_unemp))
par(mfrow=c(1,2))
plot(forecast(auto.arima(lf_unemp)))
plot(forecast(tbats(lf_unemp)))
u_rate = ts(lf[,8], start = c(2010,1), frequency = 4)
plot(decompose(u_rate))
colnames(lf)
outside = ts(lf[,5], start = c(2010,1), frequency = 4)
plot(decompose(outside))
par(mfrow=c(1,2))
plot(forecast(auto.arima(outside)))
plot(forecast(tbats(outside)))
lf[,'lf_outside']
lf[,5]
