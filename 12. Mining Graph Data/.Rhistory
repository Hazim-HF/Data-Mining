class(mvad)
library(TraMineR)
data("mvad")
head(mvad)
class(mvad)
library(TraMineR)
data("mvad")
class(mvad)
class(mvad)
?seqdef
seqfplot(mvad.seq, idxs=1:20)
library(TraMineR)
data("mvad")
class(mvad)
class(mvad)
str(mvad)
unique(mvad$Jul.93)
mvad.labels=c('bekerja', 'sambung belajar', 'pengjian tinggi', 'penganggur',
'sekolah', 'latihan')
mvad.scode = c('EM', 'FE', 'HE', 'JL', 'SC', 'TR')
mvad.seq = seqdef(mvad, 15:86, states=mvad.scode, labels = mvad.labels, xstep = 6)
# xstep = 6 :
mvad.seq
# mean time spent on a state
seqmeant(mvad.seq)
seqfplot(mvad.seq, idxs=1:20)
seqfplot(mvad.seq, idxs=1:20)
seqfplot(mvad.seq, idxs=1:50)
seqfplot(mvad.seq, idxs=1:20)
seqfplot(mvad.seq, idxs=1:10)
library(TraMineR)
data("mvad")
class(mvad)
class(mvad)
str(mvad)
unique(mvad$Jul.93)
mvad.labels=c('bekerja', 'sambung belajar', 'pengjian tinggi', 'penganggur',
'sekolah', 'latihan')
mvad.scode = c('EM', 'FE', 'HE', 'JL', 'SC', 'TR')
mvad.seq = seqdef(mvad, 15:86, states=mvad.scode, labels = mvad.labels, xstep = 6)
# xstep = 6 :
mvad.seq
# mean time spent on a state
seqmeant(mvad.seq)
seqfplot(mvad.seq, idxs=1:10)
seqdplot(mvad.seq, border=NA, main='Plot taburan keadaan')
seqmsplot(mvad.seq)
seqHtplot(mvad.seq, main='entropi rentas lintang')
# mean time spent on a certain sequence
mvad.seqe = seqecreate(mvad.seq)
fsubseq = seqefsub(mvad.seqe, pmin.support=0.05)
plot(fsubseq[1:15], col='yellow')
library(cluster)
submat = seqsubm(mvad.seq, method='TRATE')
dist.om = seqdist(mvad.seq, method='OM', sm=submat)
clusterward = agnes(dist.om, diss='T', method='ward')
plot(clusterward)
cl.4 = cutree(clusterward, k=4)
cl.4fac = factor(cl.4, labels=paste('Kumpulan', 1:4))
seqfplot(mvad.seq, group=cl.4fac, main='10 Jujukan yang paling kerap berlaku',idxs=1:10)
seqdplot(mvad.seq, group=cl.4fac, border=NA, main='Plot taburan keadaan')
seqHtplot(mvad.seq, group=cl.4fac, main='Transversal Entropy')
?seqdplot
?seqmsplot
```{r, fig.width=5, fig.height=5}
seqmsplot(mvad.seq)
seqmsplot(mvad.seq)
seqmsplot(mvad.seq)
seqdplot(mvad.seq, border=NA, main='Plot taburan keadaan')
?seqdplot
# mean time spent on a certain sequence
mvad.seqe = seqecreate(mvad.seq)
fsubseq = seqefsub(mvad.seqe, pmin.support=0.05)
mvad.seqe
?seqecreate
# mean time spent on a certain sequence
mvad.seqe = seqecreate(mvad.seq)
?seqefsub
fsubseq = seqefsub(mvad.seqe, pmin.support=0.05)
fsubseq
fsubseq = seqefsub(mvad.seqe, pmin.support=0.00)
fsubseq
fsubseq = seqefsub(mvad.seqe, pmin.support=0.05)
fsubseq
library(cluster)
submat = seqsubm(mvad.seq, method='TRATE')
dist.om = seqdist(mvad.seq, method='OM', sm=submat)
library(cluster)
submat = seqsubm(mvad.seq, method='TRATE')
dist.om = seqdist(mvad.seq, method='OM', sm=submat)
# sequence substituation cost matrix
submat = seqsubm(mvad.seq, method='TRATE')
submat
?seqsubm
dist.om
library(cluster)
# sequence substituation cost matrix
submat = seqsubm(mvad.seq, method='TRATE')
# sequence distance computation
dist.om = seqdist(mvad.seq, method='OM', sm=submat)
clusterward = agnes(dist.om, diss='T', method='ward')
plot(clusterward)
cl.4 = cutree(clusterward, k=4)
cl.4fac = factor(cl.4, labels=paste('Kumpulan', 1:4))
clusterward = agnes(dist.om, diss='T', method='ward')
plot(clusterward); abline(h=800)
cl.4 = cutree(clusterward, k=4)
cl.4fac = factor(cl.4, labels=paste('Kumpulan', 1:4))
head(cl4.fac)
library(TraMineR)
data("mvad")
class(mvad)
class(mvad)
str(mvad)
unique(mvad$Jul.93)
mvad.labels=c('bekerja', 'sambung belajar', 'pengjian tinggi', 'penganggur',
'sekolah', 'latihan')
mvad.scode = c('EM', 'FE', 'HE', 'JL', 'SC', 'TR')
mvad.seq = seqdef(mvad, 15:86, states=mvad.scode, labels = mvad.labels, xstep = 6)
# xstep = 6 :
mvad.seq
# mean time spent on a state
seqmeant(mvad.seq)
seqfplot(mvad.seq, idxs=1:10)
# sequence density plot
seqdplot(mvad.seq, border=NA, main='Plot taburan keadaan')
# mode of sequence based on certain time period
# sequence modal state plot
seqmsplot(mvad.seq)
# rate of change
seqHtplot(mvad.seq, main='entropi rentas lintang')
# mean time spent on a certain sequence
mvad.seqe = seqecreate(mvad.seq)
fsubseq = seqefsub(mvad.seqe, pmin.support=0.05)
plot(fsubseq[1:15], col='yellow')
library(cluster)
# sequence substituation cost matrix
submat = seqsubm(mvad.seq, method='TRATE')
# sequence distance computation
dist.om = seqdist(mvad.seq, method='OM', sm=submat)
clusterward = agnes(dist.om, diss='T', method='ward')
plot(clusterward); abline(h=800)
cl.4 = cutree(clusterward, k=4)
cl.4fac = factor(cl.4, labels=paste('Kumpulan', 1:4))
head(cl.4fac)
disc = seqecmpgroup(fsubseq, group=cl.4fac)
plot(disc[1:6])
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
# error occurs due to the file does not end with newline
text = readLines('./Data/text.txt')
class(text)
d = data.frame(word = names(v), freq = v)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(ggplot2)
# warning occurs due to the file does not end with newline
text = readLines('./Data/text.txt')
class(text)
# after we add new line at the end, no warning will appear
readLines('./Data/newtext.txt')
docs = Corpus(VectorSource(text))
#inspect(docs)
class(docs)
toSpace = content_transformer(function(x, pattern)
gsub(pattern, '', x))
docs2 = tm_map(docs, toSpace, '!')
docs3 = tm_map(docs2, toSpace, ':')
docs4 = tm_map(docs3, toSpace, ',')
docs5 = tm_map(docs4, content_transformer(tolower))
docs6 = tm_map(docs5, removeNumbers)
docs7 = tm_map(docs6, removeWords, stopwords('english'))
docs8 = tm_map(docs7, removePunctuation)
docs9 = tm_map(docs8, stripWhitespace)
docs10 = tm_map(docs9, stemDocument)
dtm = TermDocumentMatrix(docs10)
m = as.matrix(dtm)
m
dim(m)
v = sort(rowSums(m), decreasing = T)
v
d = data.frame(word = names(v), freq = v)
d
set.seed(12)
wordcloud(words=d$word, freq = d$freq, min.freq = 2, max.words = 150,
random.order = F, colors = brewer.pal(8, 'Dark2'))
findAssocs(dtm, terms = 'freedom', corlimit = 0.3)$freedom
?wordcloud
ls('package:SnowBallC')
ls('package:SnowballC')
?findAssocs
str(findAssocs(dtm, terms = 'freedom', corlimit = 0.3))
class(g)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
# Perlombongan data graf
library(igraph)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
g
class(g)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
g
class(g)
# labelkan nod/verteks
V(g)$name = c('Adam', 'Judy', 'Bobby', 'Sam', 'Frank', 'Tom', 'Jerry',
'Jay')
g
# Plot graf dengan hubungan tak terarah
set.seed(12)
plot(g)
dg = graph_from_literal(KL-+CHINA, KL-+London, CHINA++London)
dg
plot(dg)
plot(dg)
tr = make_tree(40, children=3, mode='undirected')
plot(tr)
tr = make_tree(40, children=3, mode='undirected')
plot(tr)
class(tr)
library(HyperG)
h = hypergraph_from_edgelist(list(1:2, 2:5, 3:7, c(1,3,5,7,9)))
plot(h)
# no. bottom vertices, no. top vertices, connection probability
gb = sample_bipartite(10, 5, p=0.4)
col = c('blue', 'red')
shape = c('circle', 'square')
plot(gb, vertex.color = col[as.numeric(V(gb)$type+1)],
vertex.shape=shape[as.numeric(V(gb)$type+1)])
class(gb)
library(HyperG)
h = hypergraph_from_edgelist(list(1:2, 2:5, 3:7, c(1,3,5,7,9)))
plot(h)
ls('package:igraph')
h3 = union(h2, g)
# Perlombongan data graf
library(igraph)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
g
class(g)
# labelkan nod/verteks
V(g)$name = c('Adam', 'Judy', 'Bobby', 'Sam', 'Frank', 'Tom', 'Jerry',
'Jay')
g
# Plot graf dengan hubungan tak terarah
set.seed(12)
plot(g)
dg = graph_from_literal(KL-+CHINA, KL-+London, CHINA++London)
dg
plot(dg)
m = read.table(row.names=1, header=T,
text=' A   B   C   D   E   F
A 0   0   0   0   0   1
B 0   0   0.5 0   0   0.5
c 0.5 0.2 0   0.3 0   0
D 0.1 0   0   0   0.3 0.6
E 0.2 0   0.1 0   0.7 0
F 0   0.4 0.2 0   0.3 0.1')
m = as.matrix(m)
ig = graph_from_adjacency_matrix(m, weighted=T)
plot(ig, edge.label=E(ig)$weight)
plot(dg)
tr = make_tree(40, children=3, mode='undirected')
plot(tr)
class(tr)
# no. bottom vertices, no. top vertices, connection probability
gb = sample_bipartite(10, 5, p=0.4)
col = c('blue', 'red')
shape = c('circle', 'square')
plot(gb, vertex.color = col[as.numeric(V(gb)$type+1)],
vertex.shape=shape[as.numeric(V(gb)$type+1)])
class(gb)
library(HyperG)
h = hypergraph_from_edgelist(list(1:2, 2:5, 3:7, c(1,3,5,7,9)))
plot(h)
plot(g)
Adj.list1 = as_adj_list(g)
Adj.list1
Adj.list2 = as_adj_list(dg)
Adj.list2
Adj.list3 = as_adj_list(tr)
Adj.list3
Ed.list1 = as.data.frame(as_edgelist(g))
Ed.list1
Ed.list2 = as.data.frame(as_edgelist(dg))
Ed.list2
Ed.list3 = as.data.frame(as_edgelist(gb))
Ed.list3
Adj.M1 = as_adjacency_matrix(g)
Adj.M1
Adj.M2 = as_adjacency_matrix(dg)
Adj.M2
library(igraph)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
V(g)$name = c('Adam', 'Judy', 'Bobby', 'Sam', 'Frank', 'Tom', 'Jerry',
'Jay')
plot(g)
h = g- vertices(c('Jerry', 'Bobby'))
h
par(mfrow=c(1,2))
plot(g)
plot(h)
h2 = graph_from_literal('Adam'-'Judy', 'Adam'-'Tom', 'Judy'-'Aminah',
'Aminah'-'Frank')
plot(h2)
h3 = union(h2, g)
plot(h3)
h3 = union(h2, g)
plot(h3)
V(h3)
V(h3)$gender = c('male', 'female', 'male', 'female', 'male', 'male', 'male',
'male', 'female')
plot(h3)
vertex_attr(h3)
plot(h3, vertex.label=V(h3)$gender, edge.label = E(h3)$type)
plot(h3, vertex.label=V(h3)$name, edge.label = E(h3)$weight)
library(statnet)
deg = degree(Bali)
# Perlombongan data graf
library(igraph)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
g
class(g)
# labelkan nod/verteks
V(g)$name = c('Adam', 'Judy', 'Bobby', 'Sam', 'Frank', 'Tom', 'Jerry',
'Jay')
g
# Plot graf dengan hubungan tak terarah
set.seed(12)
plot(g)
dg = graph_from_literal(KL-+CHINA, KL-+London, CHINA++London)
dg
plot(dg)
m = read.table(row.names=1, header=T,
text=' A   B   C   D   E   F
A 0   0   0   0   0   1
B 0   0   0.5 0   0   0.5
c 0.5 0.2 0   0.3 0   0
D 0.1 0   0   0   0.3 0.6
E 0.2 0   0.1 0   0.7 0
F 0   0.4 0.2 0   0.3 0.1')
m = as.matrix(m)
ig = graph_from_adjacency_matrix(m, weighted=T)
plot(ig, edge.label=E(ig)$weight)
plot(dg)
tr = make_tree(40, children=3, mode='undirected')
plot(tr)
class(tr)
# no. bottom vertices, no. top vertices, connection probability
gb = sample_bipartite(10, 5, p=0.4)
col = c('blue', 'red')
shape = c('circle', 'square')
plot(gb, vertex.color = col[as.numeric(V(gb)$type+1)],
vertex.shape=shape[as.numeric(V(gb)$type+1)])
class(gb)
library(HyperG)
h = hypergraph_from_edgelist(list(1:2, 2:5, 3:7, c(1,3,5,7,9)))
plot(h)
plot(g)
Adj.list1 = as_adj_list(g)
Adj.list1
Adj.list2 = as_adj_list(dg)
Adj.list2
Adj.list3 = as_adj_list(tr)
Adj.list3
Ed.list1 = as.data.frame(as_edgelist(g))
Ed.list1
Ed.list2 = as.data.frame(as_edgelist(dg))
Ed.list2
Ed.list3 = as.data.frame(as_edgelist(gb))
Ed.list3
Adj.M1 = as_adjacency_matrix(g)
Adj.M1
Adj.M2 = as_adjacency_matrix(dg)
Adj.M2
library(igraph)
g = graph_from_literal(1-2, 1-3, 1-7, 3-4, 2-3, 2-4, 3-5, 4-5,
4-6, 4-7, 5-6, 5-8, 6-7, 7-8)
V(g)$name = c('Adam', 'Judy', 'Bobby', 'Sam', 'Frank', 'Tom', 'Jerry',
'Jay')
plot(g)
h = g- vertices(c('Jerry', 'Bobby'))
h
par(mfrow=c(1,2))
plot(g)
plot(h)
h2 = graph_from_literal('Adam'-'Judy', 'Adam'-'Tom', 'Judy'-'Aminah',
'Aminah'-'Frank')
plot(h2)
h3 = union(h2, g)
plot(h3)
V(h3)
V(h3)$gender = c('male', 'female', 'male', 'female', 'male', 'male', 'male',
'male', 'female')
plot(h3)
vertex_attr(h3)
# view the edge of the graph
E(h3)
E(h3)$type = c('email', 'phone', 'FB', 'email', 'class', 'Twitter', 'neighbor',
'phone', 'FB', 'email', 'class', 'neighbor', 'phone', 'email',
'email', 'FB', 'neighbor')
edge_attr(h3)
E(h3)$weight = c(10,1,3,2,2,2,1,5,9,8,1,6,2,9,3,10,7)
edge_attr(h3)
plot(h3, vertex.label=V(h3)$gender, edge.label = E(h3)$type)
plot(h3, vertex.label=V(h3)$name, edge.label = E(h3)$weight)
library(statnet)
library(devtools)
install_github('DougLuke/UserNetR')
library(UserNetR)
data(Bali)
par(mar=c(1,1,1,1))
plot(Bali, displaylabels = T)
Bali
name = Bali%v%'vertex.names'
name
Role = Bali%v%'role'
Role
Attr = Bali%e%'IC'
Attr
centralization(Bali, degree)
centralization(Bali, degree)
centralization(Bali, degree)
centralization(Bali, closeness)
net = Bali
cpnet = cutpoints(net, return.indicator = T)
cpnet
data(Facebook)
plot(Facebook)
name[4]
str(name[4])
cpnet
net = Bali
cpnet = cutpoints(net, return.indicator = T)
cpnet
name[4]
cpnet
class(Facebook)
data(Facebook)
plot(Facebook)
class(Facebook)
clique = cliques(Facebook)
clique
# biggest clique
max_clique = max_cliques(Facebook)
# biggest clique
max_clique
k_core = coreness(Facebook)
# plot same cores
V(Facebook)$color = as.factor(k_core)
plot(Facebook, main = 'Subgroups based on cores', vertex.size=7,
vertex.label.cex=0.7)
k_core
?vertex_attr
#community detection
community_d = cluster_louvain(Facebook)
plot(community_d, Facebook)
#modularity
modularity_score = modularity(community_d)
modularity_score
data(mtcars)
scale(mtcars)
library(corrplot)
corrplot(cor(scale(mtcars)), order='hclust')
library(psych)
scree(scale(mtcars))
factanal(scale(mtcars), factors=3, scores='regression', rotation='varimax')
mtcars
F.A
data(mtcars)
scale(mtcars)
library(corrplot)
corrplot(cor(scale(mtcars)), order='hclust')
library(psych)
scree(scale(mtcars))
factanal(scale(mtcars), factors=3, scores='regression', rotation='varimax')
fa=factanal(scale(mtcars), factors=3, scores='regression', rotation='varimax')
fa$scores
