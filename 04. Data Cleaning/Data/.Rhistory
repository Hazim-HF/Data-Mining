install.packages('xfun')
library(xfun)
library(rmarkdown)
dataAP3 <- read.csv('dataAP3.csv', header = T)
head(dataAP3)
dataAP3 = dataAP3[,-c(1)]
head(dataAP3)
his(ozone_ppm)
his(dataAP3$ozone_ppm)
hist(dataAP3$ozone_ppm)
v
min_ozone = min(ozone_ppm)
max_ozone = max(ozone_ppm)
v = ((dataAP3$ozone_ppm - min_ozone) * (1 - 0)) / (max_ozone-min_ozone)
min_ozone = min(dataAP3$ozone_ppm)
max_ozone = max(dataAP3$ozone_ppm)
v = ((dataAP3$ozone_ppm - min_ozone) * (1 - 0)) / (max_ozone-min_ozone)
v
head(v)
hist(v)
mean_hpa = mean(dataAP3$pressure_height.hPA)
sd_hpa = sd(dataAP3$pressure_height.hPA)
z_score_hpa = (dataAP3$pressure_height.hPA - mean_hpa) / sd_hpa
z_score_hpa
head(z_score_hpa)
pHnew = pressure_height.hPA/1000
pHnew = dataAP3$pressure_height.hPA/1000
head(pHnew)
dataAP3$Visibility_pAerosol
hist(dataAP3)
hist(dataAP3$Visibility_pAerosol)
vis2 = sqrt(dataAP3$Visibility_pAerosol)
hist(vis2)
library(infotheo)
attach(USArrests)
head(USArrests)
dim(USArrests)
head(USArrests)
cutoff = 10 # Need domain explanation
status_m = ifelse(Murder<10,'Low Risk','High Risk')
head(status_m)
library(car)
install.packages('car')
library(car)
status_den = Recode(UrbanPop, "0:50 = 'Low Density';
51:70 = 'Moderate Density'
else = 'High Density'")
status_den = Recode(UrbanPop, "0:50 = 'Low Density';
51:70 = 'Moderate Density';
else = 'High Density'")
head(status_den)
?UrbanPop
UrbanPop
?Recode
head(status_den)
unique(Assault.Staus)
unique(assault_status)
assault_status = discretize(Assault, 'equalwidth', 4)
unique(assault_status)
head(assault_status)
unique(assault_status)
USArrests
hist(assault_status)
class(assault_status)
assault_status
hist(assault_status$X)
barplot(assault_status$X)
ggplot(assault_status$X)
library('ggplot2')
ggplot(assault_status$X)
ggplot(assault_status)
ggplot(assault_status, geom_bar(stat='identify'))
ggplot(assault_status)
barplot(assault_status)
```{r}
barplot(assault_status$X)
data = table(assault_status$X)
barplot(data)
barplot(table(assault_status$X))
k = table(assault_status$X)
k
table(assault_status$X)
barplot(table(assault_status$X))
hist(assault_status$X)
discretize(Assault, 'equalfreq')
hist(discretize(Assault, 'equalfreq')$X)
barplot(discretize(Assault, 'equalfreq')$X)
barplot(table(discretize(Assault, 'equalfreq')$X))
barplot(table(discretize(Assault, 'equalfreq',4)$X))
barplot(table(discretize(Assault, 'equalfreq', 4)$X))
library(discretization)
install.packages('discretization')
library(discretization)
data(iris)
iris2 = chi2(iris, alp=0.05)$Disc.data
?chi2
?chi2
iris2 = chi2(iris, alp=0.05)$Disc.data
head(iris2)
data = read.csv('data.csv')
head(data)
data = read.csv('data.csv', sep=';')
head(data)
hist(data$expenditure)
exp_t = log(data$expenditure)
hist(exp_t)
hist(exp_t, main='Log of expenditure')
str(data)
str(data)
data$education_level = as.factor(data$education_level)
str(data)
data_lm = lm(log(expenditure)~income+education_level+work_experience, data=data)
summary(data_lm)
kewangan = read.table('Kewangan.D.txt')
head(kewangan)
table(kewangan$Bangsa)
table(kewangan$Bangsa)/length(kewangan$Bangsa)
sample_size = 3000
sm = sample_size * 0.6
sc = sample_size * 0.3
dm = subset(kewangan, Bangsa='Melayu')
dc = subset(kewangan, Bangsa='Cina')
di = subset(kewangan, Bangsa='India')
di
di = subset(kewangan, Bangsa='India')
dm = subset(kewangan, Bangsa=='Melayu')
di = subset(kewangan, Bangsa=='India')
di
nm = sample(nrow(dm), size=sm, replace=F)
?sample
nrow(d1)
nrow(di)
sample(16910, 0.6*3000)
nm
nm = sample(nrow(dm), size=sm, replace=F)
nc = sample(nrow(dc), size=sc, replace=F)
ni = sample(nrow(di), size=si, replace=F)
sample_size = 3000
sm = sample_size * 0.6
sc = sample_size * 0.3
si = sample_size * 0.1
dm = subset(kewangan, Bangsa=='Melayu')
dc = subset(kewangan, Bangsa=='Cina')
di = subset(kewangan, Bangsa=='India')
nm = sample(nrow(dm), size=sm, replace=F)
nc = sample(nrow(dc), size=sc, replace=F)
ni = sample(nrow(di), size=si, replace=F)
Sys.Date()
sample_data <- rnorm(60)
ts(sample_data, start=c(2020,2), frequency = 12)
dates_format <- read.csv('dates_formats3.csv', sep = ';')
head(dates_format)
attach(dates_format)
class(Japanese_format)
dates_format$Japanese_format <- as.Date(Japanese_format, format = "%d/%m/%Y")
dates_format
install.packages('USgas')
library(USgas)
data(package = 'USgas')
data(usgas)
ts.plot(usgas)
data(USVsales)
towel <- read.csv('towel.csv')
head(towel)
head(ts(towel))
ts.plot(ts(towel), main = 'Towel Daily Sales', xlab = 'Day', ylab = 'Towel')
lines(fitted(auto.arima(ts(towel))), col = 'red', lty = 2)
library(forecast)
Sys.Date()
sample_data <- rnorm(60)
ts(sample_data, start=c(2020,2), frequency = 12)
dates_format <- read.csv('dates_formats3.csv', sep = ';')
head(dates_format)
attach(dates_format)
class(Japanese_format)
dates_format$Japanese_format <- as.Date(Japanese_format, format = "%d/%m/%Y")
dates_format
library(USgas)
data(package = 'USgas')
data(usgas)
ts.plot(usgas)
data(USVsales)
towel <- read.csv('towel.csv')
head(towel)
head(ts(towel))
library(forecast)
ts.plot(ts(towel), main = 'Towel Daily Sales', xlab = 'Day', ylab = 'Towel')
lines(fitted(auto.arima(ts(towel))), col = 'red', lty = 2)
legend('bottomleft', 'Towel', col = 2, lty = 2)
auto.arima(ts(towel))
model <- arima(ts(towel), order = c(0,1,1))
summary(model)
f1 <- forecast(model)
f1
f2 <- forecast(auto.arima(ts(towel)))
f2
predict(auto.arima(ts(towel)), n.ahead = 10)
str(f1)
f1$lower[,1]
?forecast
identical(f1, f2)
identical(f1$, f2)
str(f1)
f1$lower[,1]
identical(f1, f2)
Sys.Date()
sample_data <- rnorm(60)
ts(sample_data, start=c(2020,2), frequency = 12)
dates_format <- read.csv('dates_formats3.csv', sep = ';')
head(dates_format)
attach(dates_format)
class(Japanese_format)
dates_format$Japanese_format <- as.Date(Japanese_format, format = "%d/%m/%Y")
dates_format
library(USgas)
data(package = 'USgas')
data(usgas)
ts.plot(usgas)
data(USVsales)
towel <- read.csv('towel.csv')
head(towel)
head(ts(towel))
library(forecast)
ts.plot(ts(towel), main = 'Towel Daily Sales', xlab = 'Day', ylab = 'Towel')
lines(fitted(auto.arima(ts(towel))), col = 'red', lty = 2)
legend('bottomleft', 'Towel', col = 2, lty = 2)
auto.arima(ts(towel))
model <- arima(ts(towel), order = c(0,1,1))
summary(model)
f1 <- forecast(model)
f1
f2 <- forecast(auto.arima(ts(towel)))
f2
predict(auto.arima(ts(towel)), n.ahead = 10)
str(f1)
f1$lower[,1]
identical(f1, f2)
load('sample2.RData')
str(sample2)
library(dtw)
dist(sample2, method = 'DTW')
hclust(dist(sample2, method = 'DTW'), method = 'average')
plot(hclust(dist(sample2, method = 'DTW'), method = 'average'))
eco_data <- read.csv('economic_data.csv', sep = ';')
head(eco_data)
eco_ts <- ts(eco_data[,2], start = c(2000,1), frequency = 12)
head(eco_ts)
plot.ts(eco_ts, main = 'Choii', xlab = 'Time', ylab = 'Economy')
eco_model <- auto.arima(eco_ts)
summary(eco_model)
fcst <- forecast(eco_model)
fcst
eco_U <- fcst$pred+0.69*fcst$se
fcst$pred
fcst$pred+0.69
fcst$se
fcst
str(fcst)
fcst <- forecast(eco_model)
fcst
?predict
?forecast
fcst <- predict(eco_model)
fcst
fcst <- predict(eco_model)
fcst <- forecast(eco_model)
fcst
eco_model <- auto.arima(eco_ts)
summary(eco_model)
fcst <- predict(eco_model)
class(eco_model)
fcst <- predict(eco_model)
is.null(eco_model)
eco_model <- auto.arima(eco_ts, n.ahead=10)
eco_model <- auto.arima(eco_ts)
eco_model <- auto.arima(eco_ts)
summary(eco_model)
plot(eco_ts, fcst$mean)
?forecast
library(dplyr)
data = custdata5 %>%
mutate(sex=as.factor(sex)) %>%
mutate(marital.stat=as.factor(marital.stat)) %>%
mutate(health.ins=as.factor(health.ins)) %>%
mutate(housing.type=as.factor(housing.type)) %>%
mutate(recent.move=as.factor(recent.move)) %>%
mutate(is.employed.fix1=as.factor(is.employed.fix1)) %>%
library(dplyr)
data = custdata5 %>%
mutate(sex=as.factor(sex)) %>%
mutate(marital.stat=as.factor(marital.stat)) %>%
mutate(health.ins=as.factor(health.ins)) %>%
mutate(housing.type=as.factor(housing.type)) %>%
mutate(recent.move=as.factor(recent.move)) %>%
mutate(is.employed.fix1=as.factor(is.employed.fix1))
custdata5 = read.csv('custdata5.csv', sep=';')
custdata5
str(custdata5)
custdata5 = read.csv('custdata5.csv', sep=';')
custdata5
str(custdata5)
library(dplyr)
data = custdata5 %>%
mutate(sex=as.factor(sex)) %>%
mutate(marital.stat=as.factor(marital.stat)) %>%
mutate(health.ins=as.factor(health.ins)) %>%
mutate(housing.type=as.factor(housing.type)) %>%
mutate(recent.move=as.factor(recent.move)) %>%
mutate(is.employed.fix1=as.factor(is.employed.fix1))
par(mfrow=c(1,3))
hist(mdata$crim)
library(mice)
mdata = read.csv('MData.csv', sep=';')
head(mdata)
md.pattern(mdata)
mdata2 = mdata[complete.cases(mdata),]
mdata[!complete.cases(mdata),]
mdata$indus
#edit(mdata$indus)
mdata
median(mdata$crim, na.rm=T)
mdata$crim = ifelse(is.na(mdata$crim), median(mdata$crim, na.rm=T), mdata$crim)
mdata
par(mfrow=c(1,3))
hist(mdata$crim)
hist(mdata$indus)
hist(mdata$medv)
iris_mis1 = read.csv('iris.mis1.csv')
library(multiUS)
?knn
?KNNimp
iris_knn = KNNimp(data=iris_mis1, k=10)
iris_knn
iris_mis1 = read.csv('iris.mis1.csv')
iris_mis1
library(multiUS)
iris_knn = KNNimp(data=iris_mis1, k=10)
iris_knn
airquality = read.table('airquality.txt')
